#!/usr/bin/perl
#/*
# * 
# */
#
# ZD runner
#

use strict;
use warnings;

sub find_and_replace($$) {
    my ($file, $tokens) = @_;
    my $tmpfile = $file . '.tmp';
    
    open(FIN, "<$file") or die("Error: cannot open file $file\n");
    open(FOUT, ">$tmpfile") or die("Error: cannot open file $tmpfile\n");
    
    my $line;
    while($line = <FIN>){
        foreach my $key (keys(%$tokens)) {
            my $pos = index($line, $key);
            while ($pos >= 0) {
                substr($line, $pos, length($key), $tokens->{$key});    
                $pos = index($line, $key);
            }
        }
        print FOUT $line;
    }
    
    close FIN;
    close FOUT;
    
    my (undef, undef, $mode) = stat($file);
    unlink $file;
    rename $tmpfile, $file;
    chmod $mode, $file;
}

sub get_random_id() {
	my @n;
	srand(time ^ ($$ + ($$ << 15)) ^ int(rand(0xFFFF)));
	push(@n, sprintf("%04x", int(rand(0xFFFF)))) for (0..7);
	return "$n[0]$n[1]-$n[2]-$n[3]-$n[4]-$n[5]$n[6]$n[7]";
}

sub is_leopard() {
	my $ver = `/usr/bin/sw_vers -productVersion`;
	return $ver && $ver =~ /^10\.5\./;
}

my $home_dir = $ENV{HOME};
die("Error: unable to get user home directory") unless ($home_dir);

my $app_root = "@INSTALL.APP.ROOT@";
my $app_timestamp = "@INSTALL.APP.TIMESTAMP@";
my $data_root = "$home_dir/Library/Zimbra Desktop";
my $is_upgrade = 0;
my $tmpdir = "$home_dir/Library/.zdtmp";
my $lockfile = "$home_dir/Library/.zdrun.lock";
my $lockfh;

my @user_files = ("index", "store", "sqlite", "log", "zimlets-properties", "zimlets-deployed", 
	"conf/keystore", "conf/local_prefs.json", "profile/persdict.dat", "profile/localstore.json");

sub isLocalConfigUpdated {
	my $current_timestamp = $_[0];
    my $counter = 0;
    my $file_updated = 0;
    {
    do{
		my $new_timestamp = (stat("$data_root/conf/localconfig.xml"))[9];
		if($new_timestamp != $current_timestamp) {
			$file_updated = 1;
			last;
		}
		else {
			sleep(2);
		}
		$counter = $counter + 1;
    }while( $counter < 10 );
    }
    return $file_updated;
}

# This will be only used when upgrading from 7.2 to 7.3
sub upgradePreferences() {
    my $src_file = "$tmpdir/profile/prefs.js";
    my $dest_folder = "$data_root/conf";
    my $dest_file = "$dest_folder/local_prefs.json";
    my $pref = "";

    # No existing preferences found
    if (!-e $src_file) {
        return;
    }

    if(!-e $dest_folder) {
        return;
    }

    # Read existing prism preference from tmp directory
    my %attrs;
    open(my $fh1, '<', $src_file) or die "Could not open file '$src_file' $!";
    my $cnt =0 ;
    while(my $row = <$fh1>) {
        chomp $row;
        if ($row =~ m/intl.accept_languages/ || $row =~ m/app.update.channel/) {
            my @parts = split /[(),\s\";]+/, $row;
            $attrs{$parts[1]} = $parts[2];
            $cnt++;
        }
    }
    close $fh1;

    # If user preferences are present then write them to new system in JSON format
    if ($cnt > 0) {
        my $content = "{";
        for my $attribute (keys %attrs) {
            my $val = $attrs{$attribute};
            if ($attribute =~ m/intl.accept_languages/) {
                #replace - with _ in locale
                $val =~ s/-/_/g;
                $attribute = "LOCALE_NAME";
            }
            if ($attribute =~ m/app.update.channel/) {
                $attribute = "AUTO_UPDATE_NOTIFICATION";
            }
            $content = $content . "\"$attribute\":\"$val\",";
        }
        $content = substr $content, 0, length($content) - 1;
        $content = $content . "}";
        open(my $fh2, '>', $dest_file) or die "Could not open file '$dest_file' $!";
        print $fh2 $content;
        close $fh2;
    }
}

sub launch_node_webkit() {
    my $current_timestamp = (stat("$data_root/conf/localconfig.xml"))[9];
    system("\"$data_root/bin/start-zdesktop\"");

    if(isLocalConfigUpdated($current_timestamp) == 0) {
        # localconfig.xml did not get updated; stop the existing jetty proccess and start new one.
        system("\"$data_root/bin/stop-zdesktop\"");
        sleep(2);
        system("\"$data_root/bin/start-zdesktop\"");
        if(isLocalConfigUpdated($current_timestamp) == 0) {
	        print "localconfig.xml zimbra_admin_service_port not updated by jetty !\n";
            exit 1;
        }
    }

    use XML::Simple;
	my $localconfigkey = XMLin("$data_root/conf/localconfig.xml")->{key};
	my $jettyport = $localconfigkey->{zimbra_admin_service_port}->{value};
	my $installationkey = $localconfigkey->{zdesktop_installation_key}->{value};
	my $URL = "http://127.0.0.1:" . $jettyport . "/desktop/login.jsp?at=" . $installationkey;

	system("\"$app_root/Zimbra Desktop.app/Contents/MacOS/reopen\" &");
	exec("\"$app_root/Zimbra Desktop.app/Contents/MacOS/nwjs\" data-path=\"$data_root\" url=$URL");
}

# ensure single running instance of this script per user
if (!open($lockfh, ">$lockfile")) {
    print "can not open $lockfile\n";
    exit 1;
}
if (!flock($lockfh, 2 | 4)) { # LOCK_EX | LOCK_NB
    print "another instance of zdrun is already running !\n";
    exit 1;
}

# not new install or upgrade - just run nwjs
if (-e "$data_root/.$app_timestamp") {
	launch_node_webkit();
}

# backup user data
if (-e $data_root) {
	$is_upgrade = 1;
	mkdir($tmpdir);
	system("rm -rf \"$tmpdir/*\"");
	mkdir("$tmpdir/profile");
	mkdir("$tmpdir/conf");

	for (@user_files) {
		my $src = "$data_root/$_";
		system("mv -f \"$src\" \"$tmpdir/$_\"") if (-e $src);
	}

    # Copy prism preference file, we will not add it to aUserFiles as
    # we don't want to restore the same file instead we will convert it to NWJS system
    system("mv -f \"$data_root/profile/prefs.js\" \"$tmpdir/profile/prefs.js\"") if (-e "$data_root/profile/prefs.js");

	system("rm -rf \"$data_root\"");
}

# copy data files
system("cp -R -f \"$app_root/data\" \"$data_root\"");

my $inst_id = get_random_id();
my $tokens = {
	'@install.app.root@' => $app_root, 
	'@install.data.root@' => $data_root,
	'@install.key@' => $inst_id,
	'@install.locale@' => 'en-US',
	'@install.platform@' => 'MacOS'
};
if (is_leopard()) { # Leopard's JDK 1.6 does not support 32-bit mode. So we force it to use 1.5 on Leopard
	$tokens->{'#@install.leopard.java.home@'} = 'JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Versions/1.5/Home"';
}

# fix data files
find_and_replace("$data_root/conf/localconfig.xml", $tokens);
find_and_replace("$data_root/jetty/etc/jetty.xml", $tokens);
find_and_replace("$data_root/bin/zdesktop", $tokens);

# install zdesktop service
my $plist = "$home_dir/Library/LaunchAgents/com.zimbra.desktop.plist";
mkdir("$home_dir/Library/LaunchAgents");
system("cp -f \"$app_root/macos/launchd.plist\" \"$plist\"");
find_and_replace($plist, $tokens);
system("chmod +x \"$data_root/bin/zdesktop\"");
system("/bin/launchctl unload \"$plist\"");
system("/bin/launchctl load \"$plist\"");

#timestamp data files
system("touch \"$data_root/.$app_timestamp\"");

# restore user data
if ($is_upgrade) {

    # handle preferences seperately when upgrading from 7.2 (prism) to 7.3 (nwjs)
    upgradePreferences();

    for (@user_files) {
        my $src = "$tmpdir/$_";
		next if (! -e $src);

		my $dest = "$data_root/$_";
		if ((-d $src) && (-e $dest)) {
        	system("mv -f \"$src\"/* \"$dest\""); # must move '/*' outside the quote
		} else {
        	system("mv -f \"$src\" \"$dest\"");
		}
    } 

    system("rm -rf \"$tmpdir\"");
}

system("/bin/chmod 700 \"$data_root\"");
launch_node_webkit();
