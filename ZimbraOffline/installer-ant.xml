<project name="Offline-Installer" default="default">
<!--
 * 
-->

	<property file="build.properties"/>
	<property name="prod_title" value="Zimbra Desktop"/>
        <tstamp>
          <format property="current.time" pattern="yyyyMMddhhmmss"/>
        </tstamp>
	<property name="media_base" value="zdesktop_${offline.filever}${offline.branch}_b${offline.buildid}"/>
	<property name="media_win32" value="${media_base}_${current.time}_${offline.suffix_win32}"/>
	<property name="media_win64" value="${media_base}_${current.time}_${offline.suffix_win64}"/>
	<property name="media_macos" value="${media_base}_${current.time}_${offline.suffix_macos}"/>
	<property name="media_linux" value="${media_base}_${current.time}_${offline.suffix_linux}"/>
	<property name="media_linux_64" value="${media_base}_${current.time}_${offline.suffix_linux_64}"/>
	<property name="media_linux_dir" value="zdesktop_${offline.filever}${offline.branch}_b${offline.buildid}_linux_i686"/>
	<property name="media_linux_64_dir" value="zdesktop_${offline.filever}${offline.branch}_b${offline.buildid}_linux_x64"/>
	<property name="build.dir" location="../ZimbraBuild/i386" />
    <property name="deploy.dir" location="../ZimbraBuild/i386/deploy" />
	<property name="pmdoc.dir" location="./build/macos_installer.pmdoc" />
	<property name="wxs.dir" location="${basedir}\build" />
	<property name="zd.app" value="${basedir}/build/dist/app/macos/Zimbra Desktop.app" />
	<property name="winperl" value="C:\strawberry\perl\bin\perl.exe" />
	<property name="wix.home" value="C:\Program Files\Windows Installer XML v3" />
	<property name="sign.tool" value="C:\signtool\signtool.exe" />
	<property name="sign.cert" value="C:\signtool\zimbra_code_signing_cert.pfx" />
    <!-- This certificate will be ignored if we are running ant script with property osx.dontsign=true -->
	<property name="osx_installer_cert" value="Developer ID Installer: Zimbra, Inc. (WNV9Z362HD)" />
	<property name="prod_title_temp" value="Zimbra_Desktop_Temp" />
	<property name="zd.app.new" value="${basedir}/build/dist/app/Zimbra Desktop.app" />
	<available file="${sign.tool}" type="file" property="has.sign.tool" />
	<available file="${sign.cert}" type="file" property="has.sign.cert" />

	<condition property="is-mac">
		<os family="mac"/>
	</condition>
	<condition property="is-windows">
		<os family="windows"/>
	</condition>
	<condition property="is-linux">
        <and>
            <os family="unix"/>
            <not>
                <os family="mac"/>
            </not>
        </and>
	</condition>
	<condition property="sign-installer">
		<and>
			<isset property="has.sign.tool" />
			<isset property="has.sign.cert" />
		</and>
	</condition>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="../ZimbraCommon/jars/ant-contrib-1.0b1.jar" />
		</classpath>
	</taskdef>

	<target name="installer-clean">
		<delete dir="${build.dir}" />
	</target>

    <target name="default">
        <ant dir="." target="offline-make-install-files" inheritAll="false"/>
        <mkdir dir="${build.dir}" />

        <if><available file="build/dist/ext/exchange.zip" type="file" /><then>
            <move tofile="${build.dir}/exchange_${offline.filever}${offline.branch}_b${offline.buildid}.zip" file="build/dist/ext/exchange.zip"/>
            <delete dir="build/dist/ext"/>
        </then></if>

        <antcall target="installer-pack-media-mac"/>
        <antcall target="installer-pack-media-windows"/>
        <antcall target="installer-pack-media-windows-64"/>
        <antcall target="installer-pack-media-linux"/>
        <antcall target="installer-pack-media-linux_64"/>

        <antcall target="symlink-media"/>
    </target>

	<target name="installer-pack-media-mac" if="is-mac">
		<copy todir="build/dist/app/data/bin" file="src/installer/macos/start-zdesktop" overwrite="true" />
		<copy todir="build/dist/app/data/bin" file="src/installer/macos/stop-zdesktop" overwrite="true" />
		<copy todir="build/dist/app/data/bin" file="src/installer/macos/lstool" overwrite="true" />
		<chmod dir="build/dist/app/data/bin" includes="*" perm="ugo+rx" />

		<delete dir="build/dist/app/win32" />
		<delete dir="build/dist/app/win64" />
		<delete dir="build/dist/app/linux" />
		<if><available file="${zd.app}" type="dir" /><then>
			<move file="${zd.app}" tofile="${zd.app.new}" preservelastmodified="true" />
		</then></if>

		<exec executable="/usr/bin/pkgbuild" failonerror="true" >
			<arg value="--identifier" />
			<arg value="com.zimbra.desktop.full" />
			<arg value="--install-location" />
			<arg value="/Applications/Zimbra Desktop" />
			<arg value="--root" />
			<arg value="${basedir}/build/dist/app" />
			<arg value="--scripts" />
			<arg value="src/installer/macos" />
			<arg value="--nopayload" />
			<arg value="${prod_title_temp}.mpkg" />
		</exec>

        <if>
            <isset property="osx.dontsign" /><then>
            <!-- Don't sign the installer for developer builds -->
            <exec executable="/usr/bin/productbuild" failonerror="true" >
                <arg value="--distribution" />
                <arg value="Distribution.xml" />
                <arg value="--resources" />
                <arg value="src/installer/macos" />
                <arg value="${build.dir}/${prod_title}.mpkg"/>
            </exec>
        </then>
        <else>
            <exec executable="/usr/bin/productbuild" failonerror="true" >
                <arg value="--distribution" />
                <arg value="Distribution.xml" />
                <arg value="--resources" />
                <arg value="src/installer/macos" />
                <arg value="--sign" />
                <arg value="${osx_installer_cert}" />
                <arg value="${build.dir}/${prod_title}.mpkg"/>
            </exec>
        </else>
        </if>

		<delete file="${prod_title_temp}.mpkg" failonerror="false"/>

		<exec executable="/usr/bin/hdiutil" failonerror="true">
			<arg value="create" />
			<arg value="-srcfolder" />
			<arg value="${build.dir}/${prod_title}.mpkg" />
			<arg value="-volname" />
			<arg value="Zimbra Desktop Installer" />
			<arg value="-ov" />
			<arg value="${build.dir}/${media_macos}" />
			<arg value="-format" />
			<arg value="UDZO" />
			<arg value="-imagekey" />
			<arg value="zlib-level=6" />
		</exec>
	</target>

	<macrodef name="sign-binary-file">
		<attribute name="file"/>
		<sequential>
			<if><isset property="sign-installer" /><then>
				<property file="C:\signtool\zimbra_code_signing.prop" />
				<exec executable="${sign.tool}" failonerror="true">
					<arg value="sign" />
					<arg value="/f" />
					<arg value="${sign.cert}" />
					<arg value="/p" />
					<arg value="${signcert.pass}" />
					<arg value="/t" />
					<arg value="http://timestamp.digicert.com" />
					<arg value="@{file}" />
				</exec>
			</then></if>
		</sequential>
	</macrodef>

	<!-- These open source programs are required for building Windows installer  -->
	<!--   1) WiX v3.0 (http://wix.sourceforge.net/downloadv3.html) "            -->
	<!--   2) Strawberry Perl (http://strawberryperl.com/) "                     -->

	<target name="installer-pack-media-windows" if="is-windows">
		<delete dir="build/dist/app/macos" />
		<delete dir="build/dist/app/linux" />
		<copy todir="build/dist/app/data/bin" file="src/installer/win32/zdctl.vbs" overwrite="true" />
		<copy todir="build/dist/app/data/bin" file="src/installer/win32/zdctl-wrapper.vbs" overwrite="true" />
		<delete file="build/dist/app/data/bin/zdesktop" />
		<sign-binary-file file="build/dist/app/win32/node-webkit/extensions/zimbramapi/ZimbraDesktopHelper.exe" />
        <sign-binary-file file="build/dist/app/win32/node-webkit/extensions/zimbramapi/ZimbraMapi.dll" />

		<copy todir="${wxs.dir}" file="src/installer/win32/win_installer.wxs" overwrite="true" />
		<replace file="${wxs.dir}/win_installer.wxs" token="@build.root@" value="${basedir}" />
		<replace file="${wxs.dir}/win_installer.wxs" token="@zd.version@" value="${offline.version}.${offline.buildid}"/>

		<move file="build/dist/app/win64" tofile="build/win64" failonerror="false" />

		<exec executable="${winperl}" failonerror="true">
			<arg value="${basedir}\src\installer\win32\wxs-get-contents.pl" />
			<arg value="${basedir}" />
		</exec>

		<exec executable="${wix.home}\bin\candle.exe" failonerror="true">
			<arg value="-out" />
			<arg value="${wxs.dir}\win_installer.wixobj" />
			<arg value="-arch" />
			<arg value="x86" />
			<arg value="-ext" />
			<arg value="${wix.home}\bin\WixUIExtension.dll" />
			<arg value="${wxs.dir}\win_installer.wxs" />
		</exec>

		<exec executable="${wix.home}\bin\light.exe" failonerror="true">
			<arg value="-sval" />
			<arg value="-cultures:null" />
			<arg value="-ext" />
			<arg value="${wix.home}\bin\WixUIExtension.dll" />
			<arg value="-out" />
			<arg value="${build.dir}\${media_win32}" />
			<arg value="${wxs.dir}\win_installer.wixobj" />
		</exec>

		<sign-binary-file file="${build.dir}\${media_win32}" />

		<move file="build/win64" tofile="build/dist/app/win64" failonerror="false" />

	</target>

	<target name="installer-pack-media-windows-64" if="is-windows">
		<delete dir="build/dist/app/macos" />
		<delete dir="build/dist/app/linux" />
		<copy todir="build/dist/app/data/bin" file="src/installer/win64/zdctl.vbs" overwrite="true" />
		<copy todir="build/dist/app/data/bin" file="src/installer/win64/zdctl-wrapper.vbs" overwrite="true" />
		<delete file="build/dist/app/data/bin/zdesktop" />
		<sign-binary-file file="build/dist/app/win64/node-webkit/extensions/zimbramapi/ZimbraDesktopHelper.exe" />
        <sign-binary-file file="build/dist/app/win64/node-webkit/extensions/zimbramapi/ZimbraMapi.dll" />

		<copy todir="${wxs.dir}" file="src/installer/win64/win_installer_64.wxs" overwrite="true" />
		<replace file="${wxs.dir}/win_installer_64.wxs" token="@build.root@" value="${basedir}" />
		<replace file="${wxs.dir}/win_installer_64.wxs" token="@zd.version@" value="${offline.version}.${offline.buildid}"/>

		<move file="build/dist/app/win32" tofile="build/win32" failonerror="false" />

		<exec executable="${winperl}" failonerror="true">
			<arg value="${basedir}\src\installer\win64\wxs-get-contents.pl" />
			<arg value="${basedir}" />
		</exec>

		<exec executable="${wix.home}\bin\candle.exe" failonerror="true">
			<arg value="-out" />
			<arg value="${wxs.dir}\win_installer_64.wixobj" />
			<arg value="-arch" />
			<arg value="x64" />
			<arg value="-ext" />
			<arg value="${wix.home}\bin\WixUIExtension.dll" />
			<arg value="${wxs.dir}\win_installer_64.wxs" />
		</exec>

		<exec executable="${wix.home}\bin\light.exe" failonerror="true">
			<arg value="-sval" />
			<arg value="-cultures:null" />
			<arg value="-ext" />
			<arg value="${wix.home}\bin\WixUIExtension.dll" />
			<arg value="-out" />
			<arg value="${build.dir}\${media_win64}" />
			<arg value="${wxs.dir}\win_installer_64.wixobj" />
		</exec>

		<sign-binary-file file="${build.dir}\${media_win64}" />

		<move file="build/win32" tofile="build/dist/app/win32" failonerror="false" />

	</target>

	<target name="installer-pack-media-linux" if="is-linux">
		<delete dir="build/dist/app/win32" />
		<delete dir="build/dist/app/win64" />
		<delete dir="build/dist/app/macos" />
		<delete file="build/dist/app/data/zdesktop.webapp/override.ini.win32" />
		<delete file="build/dist/app/data/zdesktop.webapp/override.ini.win64" />
		<delete file="build/dist/app/data/zdesktop.webapp/override.ini.macos" />

		<mkdir dir="build/dist/${media_linux_dir}" />
		<copy todir="build/dist/${media_linux_dir}">
			<fileset dir="build/dist">
				<exclude name="app/lib/libzimbra-native.so.amd64"/>
				<exclude name="app/data/bin/zdesktop_64"/>
				<exclude name="app/linux/node-webkit-x64/"/>
				<exclude name="${media_linux_dir}/"/>
				<exclude name="${media_linux_64_dir}/"/>
			</fileset>
		</copy>
		<copy todir="build/dist/${media_linux_dir}" file="src/installer/linux/install.pl" preservelastmodified="true" overwrite="true" />
		<chmod file="build/dist/${media_linux_dir}/install.pl" perm="ugo+rx" />
		<chmod file="build/dist/${media_linux_dir}/app/linux/user-install.pl" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_dir}/app/data/bin/zdesktop" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_dir}/app/linux/zdrun.pl" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_dir}/app/linux/zd.desktop" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_dir}/app/linux/node-webkit/zd.desktop" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_dir}/app/linux/node-webkit/zdesktop" perm="ugo+x" />

		<!-- ant's tar task can't preserve permissions. we call gnu tar directly -->
		<exec executable="/bin/tar" failonerror="true">
			<arg value="pcvzf" />
			<arg value="${build.dir}/${media_linux}" />
			<arg value="-C" />
			<arg value="build/dist" />
			<arg value="${media_linux_dir}" />
		</exec>
	</target>

	<target name="installer-pack-media-linux_64" if="is-linux">
		<delete dir="build/dist/app/win32" />
		<delete dir="build/dist/app/macos" />
		<delete file="build/dist/app/data/zdesktop.webapp/override.ini.win32" />
		<delete file="build/dist/app/data/zdesktop.webapp/override.ini.macos" />

		<mkdir dir="build/dist/${media_linux_64_dir}" />
		<copy todir="build/dist/${media_linux_64_dir}">
			<fileset dir="build/dist">
				<exclude name="app/lib/libzimbra-native.so"/>
				<exclude name="app/data/bin/zdesktop"/>
				<exclude name="app/linux/node-webkit/"/>
				<exclude name="${media_linux_dir}/"/>
				<exclude name="${media_linux_64_dir}/"/>
			</fileset>
		</copy>
		<copy tofile="build/dist/${media_linux_64_dir}/install.pl" file="src/installer/linux/install_64.pl" preservelastmodified="true" overwrite="true" />

		<move file="build/dist/${media_linux_64_dir}/app/data/bin/zdesktop_64" tofile="build/dist/${media_linux_64_dir}/app/data/bin/zdesktop" />
		<move file="build/dist/${media_linux_64_dir}/app/lib/libzimbra-native.so.amd64" tofile="build/dist/${media_linux_64_dir}/app/lib/libzimbra-native.so" />
		<move todir="build/dist/${media_linux_64_dir}/app/linux/node-webkit" overwrite="true">
        	<fileset dir="build/dist/${media_linux_64_dir}/app/linux/node-webkit-x64/" />
    	</move>

		<chmod file="build/dist/${media_linux_64_dir}/install.pl" perm="ugo+rx" />
		<chmod file="build/dist/${media_linux_64_dir}/app/linux/user-install.pl" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_64_dir}/app/data/bin/zdesktop" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_64_dir}/app/linux/zdrun.pl" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_64_dir}/app/linux/zd.desktop" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_64_dir}/app/linux/node-webkit/zd.desktop" perm="ugo+x" />
		<chmod file="build/dist/${media_linux_64_dir}/app/linux/node-webkit/zdesktop" perm="ugo+x" />

		<!-- ant's tar task can't preserve permissions. we call gnu tar directly -->
		<exec executable="/bin/tar" failonerror="true">
			<arg value="pcvzf" />
			<arg value="${build.dir}/${media_linux_64}" />
			<arg value="-C" />
			<arg value="build/dist" />
			<arg value="${media_linux_64_dir}" />
		</exec>
	</target>

    <target name="replace-update-tokens">
        <replace file="${channel.file}" token="@version@" value="${offline.version}"/>
        <propertyregex property="offline.version.major" input="${offline.version}" regexp="(\d*)\.(\d*)\.(\d*)" select="\1" casesensitive="false" />
        <propertyregex property="offline.version.minor" input="${offline.version}" regexp="(\d*)\.(\d*)\.(\d*)" select="\2" casesensitive="false" />
        <propertyregex property="offline.version.micro" input="${offline.version}" regexp="(\d*)\.(\d*)\.(\d*)" select="\3" casesensitive="false" />
        <propertyregex property="timestamp_macos" input="${mac.installer.file}" regexp=".*(_b${offline.buildid})_(\d*)_${offline.suffix_macos}" select="\2" casesensitive="false"/>
        <propertyregex property="timestamp_win32" input="${win.installer.file}" regexp=".*(_b${offline.buildid})_(\d*)_${offline.suffix_win32}" select="\2" casesensitive="false"/>
        <propertyregex property="timestamp_win64" input="${win.installer.file.64}" regexp=".*(_b${offline.buildid})_(\d*)_${offline.suffix_win64}" select="\2" casesensitive="false"/>
        <propertyregex property="timestamp_linux" input="${linux.installer.file}" regexp=".*(_b${offline.buildid})_(\d*)_${offline.suffix_linux}" select="\2" casesensitive="false"/>
        <propertyregex property="timestamp_linux_64" input="${linux_64.installer.file}" regexp=".*(_b${offline.buildid})_(\d*)_${offline.suffix_linux_64}" select="\2" casesensitive="false"/>
        <replace file="${channel.file}" token="@version.major@" value="${offline.version.major}"/>
        <replace file="${channel.file}" token="@version.minor@" value="${offline.version.minor}"/>
        <replace file="${channel.file}" token="@version.micro@" value="${offline.version.micro}"/>
        <replace file="${channel.file}" token="@timestamp_macos@" value="${timestamp_macos}"/>
        <replace file="${channel.file}" token="@timestamp_win32@" value="${timestamp_win32}"/>
        <replace file="${channel.file}" token="@timestamp_win64@" value="${timestamp_win64}"/>
        <replace file="${channel.file}" token="@timestamp_linux@" value="${timestamp_linux}"/>
        <replace file="${channel.file}" token="@timestamp_linux_64@" value="${timestamp_linux_64}"/>
        <replace file="${channel.file}" token="@buildid@" value="${offline.buildid}"/>
        <replace file="${channel.file}" token="@channel@" value="${offline.channel}"/>
        <replace file="${channel.file}" token="@license@" value="${offline.aus.license}"/>
        <replace file="${channel.file}" token="@details@" value="${offline.aus.details}"/>
        <replace file="${channel.file}" token="@download_prefix@" value="${offline.download.server}${offline.download.path}"/>
        <replace file="${channel.file}" token="@buildtype@" value="${offline.relabel}"/>
        <replace file="${channel.file}" token="@extver@" value="${offline.aus.extver}"/>

        <if><available file="${build.dir}/${win.installer.file}" type="file"/><then>
            <checksum file="${build.dir}/${win.installer.file}" property="hash_win32"/>
            <length file="${build.dir}/${win.installer.file}" property="size_win32"/>
            <replace file="${channel.file}" token="@hash_win32@" value="${hash_win32}"/>
            <replace file="${channel.file}" token="@size_win32@" value="${size_win32}"/>
        </then></if>

        <if><available file="${build.dir}/${win.installer.file.64}" type="file"/><then>
            <checksum file="${build.dir}/${win.installer.file.64}" property="hash_win64"/>
            <length file="${build.dir}/${win.installer.file.64}" property="size_win64"/>
            <replace file="${channel.file}" token="@hash_win64@" value="${hash_win64}"/>
            <replace file="${channel.file}" token="@size_win64@" value="${size_win64}"/>
        </then></if>

        <if><available file="${build.dir}/${mac.installer.file}" type="file"/><then>
            <checksum file="${build.dir}/${mac.installer.file}" property="hash_macos"/>
            <length file="${build.dir}/${mac.installer.file}" property="size_macos"/>
            <replace file="${channel.file}" token="@hash_macos@" value="${hash_macos}"/>
            <replace file="${channel.file}" token="@size_macos@" value="${size_macos}"/>
        </then></if>

        <if><available file="${build.dir}/${linux.installer.file}" type="file"/><then>
            <checksum file="${build.dir}/${linux.installer.file}" property="hash_linux"/>
            <length file="${build.dir}/${linux.installer.file}" property="size_linux"/>
            <replace file="${channel.file}" token="@hash_linux@" value="${hash_linux}"/>
            <replace file="${channel.file}" token="@size_linux@" value="${size_linux}"/>
        </then></if>

        <if><available file="${build.dir}/${linux_64.installer.file}" type="file"/><then>
            <checksum file="${build.dir}/${linux_64.installer.file}" property="hash_linux_64"/>
            <length file="${build.dir}/${linux_64.installer.file}" property="size_linux_64"/>
            <replace file="${channel.file}" token="@hash_linux_64@" value="${hash_linux_64}"/>
            <replace file="${channel.file}" token="@size_linux_64@" value="${size_linux_64}"/>
        </then></if>

        <replace file="${channel.file}" token="@media_win32@" value="${win.installer.file}"/>
        <replace file="${channel.file}" token="@media_win64@" value="${win.installer.file.64}"/>
        <replace file="${channel.file}" token="@media_macos@" value="${mac.installer.file}"/>
        <replace file="${channel.file}" token="@media_linux@" value="${linux.installer.file}"/>
        <replace file="${channel.file}" token="@media_linux_64@" value="${linux_64.installer.file}"/>
    </target>

    <target name="symlink-media">
        <if><available file="${build.dir}/${media_linux}" type="file"/><then>
            <delete file="${build.dir}/zdesktop_linux_i686.tgz" quiet="true" />
            <symlink link="${build.dir}/zdesktop_linux_i686.tgz" resource="${media_linux}" overwrite="true"/>
        </then></if>
        <if><available file="${build.dir}/${media_linux_64}" type="file"/><then>
            <delete file="${build.dir}/zdesktop_linux_x64.tgz" quiet="true" />
        <symlink link="${build.dir}/zdesktop_linux_x64.tgz" resource="${media_linux_64}" overwrite="true"/>
        </then></if>
        <if><available file="${build.dir}/${media_macos}" type="file"/><then>
            <delete file="${build.dir}/zdesktop_macos_intel.dmg" quiet="true" />
            <symlink link="${build.dir}/zdesktop_macos_intel.dmg" resource="${media_macos}" overwrite="true"/>
        </then></if>
        <if><available file="${build.dir}/${media_win32}" type="file"/><then>
            <copy tofile="${build.dir}/zdesktop_win32.msi" file="${build.dir}/${media_win32}" overwrite="true"/>
        </then></if>
        <if><available file="${build.dir}/${media_win64}" type="file"/><then>
            <copy tofile="${build.dir}/zdesktop_win64.msi" file="${build.dir}/${media_win64}" overwrite="true"/>
        </then></if>
    </target>

    <target name="gen-update-files" depends="gen-filenames">
        <copy file="src/installer/auto-update/update.php" todir="${build.dir}" overwrite="true"/>
        <copy file="src/installer/auto-update/config.inc.php" todir="${build.dir}" overwrite="true"/>

        <property name="channel.file" value="${build.dir}/zd7.xml"/>

        <copy file="src/installer/auto-update/zd7.xml.template" tofile="${channel.file}" overwrite="true"/>
        <antcall target="replace-update-tokens" inheritall="true"/>
    </target>

    <target name="deploy-update-files" depends="gen-update-files">
        <!-- Create replica of folder structure which needs to be copied to remote http server -->
        <mkdir dir="${deploy.dir}"/>
        <mkdir dir="${deploy.dir}/${offline.aus.path}"/>
        <mkdir dir="${deploy.dir}/${offline.aus.path}/zd"/>

        <!-- Copy php/xml files -->
        <copy file="${build.dir}/zd7.xml" todir="${deploy.dir}/${offline.aus.path}/zd" overwrite="true"/>
        <copy file="${build.dir}/update.php" todir="${deploy.dir}/${offline.aus.path}" overwrite="true"/>
        <copy file="${build.dir}/config.inc.php" todir="${deploy.dir}/${offline.aus.path}" overwrite="true"/>

        <!-- Copy installer packages, assume offline.aus.host and offline.download.server are same -->
        <mkdir dir="${deploy.dir}/${offline.download.path}"/>

        <property name="downloads.path" value="${deploy.dir}/${offline.download.path}/${offline.version}/b${offline.buildid}"/>

        <mkdir dir="${downloads.path}"/>
        <copy file="${build.dir}/${win.installer.file}" todir="${downloads.path}" overwrite="true"/>
        <copy file="${build.dir}/${win.installer.file.64}" todir="${downloads.path}" overwrite="true"/>
        <copy file="${build.dir}/${mac.installer.file}" todir="${downloads.path}" overwrite="true"/>
        <copy file="${build.dir}/${linux.installer.file}" todir="${downloads.path}" overwrite="true"/>
        <copy file="${build.dir}/${linux_64.installer.file}" todir="${downloads.path}" overwrite="true"/>

        <!-- Copy entire folder structure to remote http server -->
        <!-- Get below parameters from jenkins -->
        <!-- property name="offline.deploy.username" value="zimbra"/ -->
        <!-- property name="offline.deploy.server_path" value="/var/www/html"/ -->
        <echo message="Copying artifacts to ${offline.deploy.username}@${offline.aus.host}:${offline.deploy.server_path}"/>
        <exec executable="rsync" dir="${build.dir}" failonerror="true">
          <arg value="-rv"/>
          <arg value="${deploy.dir}/"/>
          <arg value="${offline.deploy.username}@${offline.aus.host}:${offline.deploy.server_path}"/>
        </exec>
    </target>

    <target name="gen-filenames">
        <fileset id="mac.installers" dir="${build.dir}">
            <include name="${media_base}*${offline.suffix_macos}"/>
        </fileset>
        <property name="mac.installer.file" refid="mac.installers"/>

        <fileset id="win.installers" dir="${build.dir}">
            <include name="${media_base}*${offline.suffix_win32}"/>
        </fileset>
        <property name="win.installer.file" refid="win.installers"/>

        <fileset id="win.installers.64" dir="${build.dir}">
            <include name="${media_base}*${offline.suffix_win64}"/>
        </fileset>
        <property name="win.installer.file.64" refid="win.installers.64"/>

        <fileset id="linux.installers" dir="${build.dir}">
            <include name="${media_base}*${offline.suffix_linux}"/>
        </fileset>
        <property name="linux.installer.file" refid="linux.installers"/>

        <fileset id="linux_64.installers" dir="${build.dir}">
            <include name="${media_base}*${offline.suffix_linux_64}"/>
        </fileset>
        <property name="linux_64.installer.file" refid="linux_64.installers"/>

        <echo message="Mac installer ${mac.installer.file}"/>
        <echo message="Windows installer 32-bit ${win.installer.file}"/>
        <echo message="Windows installer 64-bit ${win.installer.file.64}"/>
        <echo message="Linux installer 32-bit ${linux.installer.file}"/>
        <echo message="Linux installer 64-bit ${linux_64.installer.file}"/>
    </target>
</project>

