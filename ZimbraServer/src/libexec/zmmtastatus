#!/usr/bin/perl
# 
# 
# 

use strict;
use Getopt::Std;
use File::Basename;

my $progname = basename($0);
# Need to be root to read the master.pid
if ($> != 0) {
  print "$0 must be run as root.\n";
  exit 1;
}

my $zimbra_home = getLocalConfig("zimbra_home");
# Exit if software-only node.
exit(1) unless (-f "${zimbra_home}/conf/localconfig.xml");

my %options = ();
unless ( getopts( 'dhv', \%options ) ) { usage(); }
usage() if ($options{h});
my $debug = $options{d} ? 1 : 0;
my $verbose = $options{v} ? 1 : 0;
$verbose = 1 if $debug;


my $pidFile="${zimbra_home}/data/postfix/spool/pid/master.pid";

exit (mtaIsRunning() ? 0 : 1);

sub mtaIsRunning {
  if (-f "$pidFile") {
    my $pid = `cat $pidFile`;
    $pid =~ s/^\s+//;
    chomp $pid;
    if ($pid ne "") {
      print "MTA process $pid is "  if $verbose;
      system("kill -0 $pid 2> /dev/null");
      if ($? == 0) {
        print "running.\n" if $verbose;
        return 1;
      } else {
        print "not running.\n" if $verbose;
      }
    }
  }
  return undef;
}

sub getLocalConfig {
  my $key = shift;
  if (defined ($ENV{zmsetvars})) {
    return $ENV{$key};
  }
  open CONF, "/opt/zimbra/bin/zmlocalconfig -x -s -q -m shell |" or die "Can't open local config: $!";
  my @conf = <CONF>;
  close CONF;

  chomp @conf;

  foreach (@conf) {
    my ($key, $val) = split '=', $_, 2;
    $val =~ s/;$//;
    $val =~ s/'$//;
    $val =~ s/^'//;
    $ENV{$key} = $val;
  }
  $ENV{zmsetvars} = 'true';
  return $ENV{$key};
}

sub usage {
  print "$progname [-h] [-v] [-d]\n";
  print "\t-h\tUsage\n";
  print "\t-v\tverbose output\n";  
  print "\t-d\tdebug output\n";
  exit;
}

